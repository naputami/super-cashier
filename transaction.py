from prettytable import PrettyTable

class Transaction:
    def __init__(self):
        """
        Constructor for creating an attribute named cart. 
        The attribute is a dictionary with item name as key and a list as its value.
        The list contains information about quantity, price, and item payment amount.
        """
        self.cart = {}
    
    def search_name(self, name):
        """
        A method for ensuring the searched name is available in cart attributes
        Args:
            name (str)
        return
            found (boolean)
        """
        found = False
        for key in self.cart:
            if key == name:
                found = True
                break
        return found

    def add_item(self, name, qty, price):
        """
        A method for adding item name, quantity, and price to cart.
        Item name is key in cart attribute whose value is a list.
        The list contains:
            - quantity (int) at index 0
            - price (int) at index 1
            - total amount (int) at index 2 that obtained from multiplication between quantity and price.
        
        Args:
            -name(str)
            -qty(str)
            -price(str)

        return: -
        """

        #ensuring that item name is inputted
        if name == "":
            print("Item name cannot be empty.")
        else:
            #error handling for casting quantity and price from string to integer.
            try:
                int_qty = int(qty)
                int_price = int(price)

                #raising exception when qty or price are 0
                if int_price == 0 or int_qty == 0:
                    raise Exception
                self.cart[name] = [int_qty, int_price, int_price * int_qty]
                print(f'{name} is successfully added to cart.')
            except:
                print("Price and quantity must be integer larger than 0")

    def check_order(self):
        """
        A method for displaying information about item name, quantity, and payment amount in a table.
        The table is generated by PrettyTable.

        Args: -
        Return: -
        """
        if len(self.cart) == 0:
            print("The cart is empty. Please add an item.")
        else:
            table = PrettyTable()
            table.field_names = ["item name", "quantity", "unit price", "amount"]

            for key, value in self.cart.items():
                row = [key] + value
                table.add_row(row)
            
            print(table)
    
    def update_name(self, old_name, new_name):
        """
        A method for updating item name in cart.

        Args:
            -old_name (str)
            -new_name (str)
        """
        self.cart[new_name] = self.cart.pop(old_name)
        print(f'{old_name} changed to {new_name}')
        

    def update_price(self, name, new_price):
        """
        A method for updating item price in cart.

        Args:
            -name (str)
            -new_price (str)
        Return: -
        """
        #error handling for casting new_price from string to integer
        try:
            int_newprice = int(new_price)

            #raise exception when new price is 0
            if int_newprice == 0:
                raise Exception
            
            self.cart[name][1] = int_newprice
            #updating total amount
            self.cart[name][2] = self.cart[name][0] * self.cart[name][1]
            print(f'{name} price is updated to {new_price}')
        except:
            print("Price must be integer larger than 0")

    def update_qty(self, name, new_qty):
        """
        A method for updating item quantity in cart.

        Args:
            -name (str)
            -new_qty (str)
        Return: -
        """
        try:
            #error handling for casting new_qty from string to integer
            int_newqty = int(new_qty)
            
            #raise exception when new quantity is 0
            if int_newqty == 0:
                raise Exception
            self.cart[name][0] = int_newqty

            #updating total amount
            self.cart[name][2] = self.cart[name][0] * self.cart[name][1]
            print(f'{name} quantity is updated to {new_qty}')
        except:
            print("Quantity must be integer larger than 0")


    def delete_item(self, name):
        """
        A method for deleting an item in cart.

        Args:
            -name (str)
        Return: -
        """
        self.cart.pop(name)
        print(f'{name} is deleted from cart.')
       

    def reset_transaction(self):
        """
        A method for clearing all items in cart.

        Args: -
        Return: -
        """
        self.cart.clear()
        print("All items are removed from cart.")

    def check_out(self):
        """
        A method for: 
            -calculating discount and total payment
            -inputing item name, quantity, and price to SQLite Database.

        if total payment >= 500.0000, user will get 7% discount.
        if total payment >= 300.0000, user will get 6% discount.
        if total payment >= 200.0000, user will get 5% discount.

        Args: -
        Return: list of tuples
        """
        if len(self.cart) == 0:
            print("The cart is empty. Please add an item.")
        else:
            subtotal = 0
            disc = 0

            #subtotal calculation
            for item in self.cart:
                subtotal += self.cart[item][2]
            
            #discount and total payment calculation
            if subtotal >= 500000:
                disc = 0.07
                total = subtotal - (subtotal * disc)
            elif subtotal >= 300000:
                disc = 0.06
                total = subtotal - (subtotal * disc)
            elif subtotal >= 200000:
                disc = 0.05
                total = subtotal - (subtotal * disc)
            else:
                total = subtotal

            #creating list of tuples for database record
            item_checkout = []
            for key, value in self.cart.items():
                """
                key = item name (str)
                value[0] = quantity (int)
                value[1] = price (int)
                value[2] = amount (int)
                """
                item_checkout.append((key, value[0], value[1], value[2]))
            
            print(f'Subtotal: {subtotal}\nDiscount: {disc:.0%}\nTotal: {total:.2f}')
            print("Thank you for shopping here!")
            
            return item_checkout
